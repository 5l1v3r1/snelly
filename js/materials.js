

////////////////////////////////////////////////////////
// Material
////////////////////////////////////////////////////////

function Material(name, desc)
{
	this._name = name;
	this._desc = desc;
}

Material.prototype.getName = function()
{
	return this._name;
}

Material.prototype.getDesc = function()
{
	return this._desc;
}

Material.prototype.getRoughness = function()
{
	return this.roughness;
}

////////////////////////////////////////////////////////
// Metals
////////////////////////////////////////////////////////


function Metal(name, desc)
{
	Material.call(this, name, desc);
	this.roughness = 0.02;
}

Metal.prototype = Object.create(Material.prototype);

Metal.prototype.sample = function()
{
	return `
				float SAMPLE(inout vec3 X, inout vec3 D, vec3 N, float wavelength_nm, inout vec4 rnd)
				{                                                          
					return sampleMetal(X, D, N, IOR(wavelength_nm), K(wavelength_nm), rnd);    
				}
	`;
}


Metal.prototype.syncShader = function(shader)
{
	shader.uniformF("roughnessMetal", this.roughness);
}

Metal.prototype.initGui  = function(parentFolder) 
{ 
	this.roughnessItem = parentFolder.add(this, 'roughness', 0.0, 1.0);
	this.roughnessItem.onChange( function(value) { snelly.controls.enabled = false; snelly.reset(true); } );
	this.roughnessItem.onFinishChange( function(value) { snelly.controls.enabled = true; } );
}

Metal.prototype.eraseGui = function(parentFolder) 
{ 
	parentFolder.remove(this.roughnessItem);
}


function tabulated_copper() { // 64 samples of n, k between 390.000000nm and 750.000000nm
	return { n: new Float32Array([1.32465408805,1.32106019766,1.30986522911,1.29548966757,1.28111410602,1.27080564784,1.26083887043,1.25087209302,1.24744397759,1.24464285714,1.24184173669,1.24095470383,1.24374216028,1.24652961672,1.24931707317,1.24471720117,1.23772011662,1.23072303207,1.22372594752,1.21572571429,1.20658285714,1.19744,1.18829714286,1.17694687983,1.14394017535,1.11093347086,1.07792676637,1.04492006189,1.00662686567,0.952042643923,0.897458422175,0.842874200426,0.788289978678,0.73370575693,0.674804446274,0.608933717579,0.543062988884,0.477192260189,0.411321531494,0.3454508028,0.296681164269,0.285975242556,0.275269320843,0.26456339913,0.253857477417,0.243151555704,0.232445633991,0.221739712278,0.218936507937,0.217666666667,0.216396825397,0.215126984127,0.213857142857,0.212587301587,0.211317460317,0.210047619048,0.213203883495,0.21653259362,0.219861303745,0.22319001387,0.226518723994,0.229847434119,0.233176144244,0.236504854369]),
			 k: new Float32Array([2.08295597484,2.10847259659,2.13905660377,2.17176100629,2.20446540881,2.23703488372,2.26959302326,2.30215116279,2.32851540616,2.35428571429,2.38005602241,2.40521045296,2.4291825784,2.45315470383,2.47712682927,2.49726355685,2.51615568513,2.53504781341,2.55393994169,2.56870171429,2.57875885714,2.588816,2.59887314286,2.60740845797,2.60101340897,2.59461835998,2.58822331099,2.58182826199,2.58230746269,2.60397057569,2.6256336887,2.64729680171,2.66895991471,2.69062302772,2.73555743104,2.81806051873,2.90056360642,2.98306669411,3.0655697818,3.14807286949,3.22748511208,3.30001773168,3.37255035129,3.44508297089,3.5176155905,3.5901482101,3.66268082971,3.73521344931,3.79570793651,3.85386666667,3.91202539683,3.97018412698,4.02834285714,4.0865015873,4.14466031746,4.20281904762,4.25412621359,4.30516643551,4.35620665742,4.40724687933,4.45828710125,4.50932732316,4.56036754508,4.61140776699]) } }

function tabulated_silver() { // 64 samples of n, k between 390.000000nm and 750.000000nm
	return { n: new Float32Array([0.05,0.05,0.05,0.05,0.05,0.0469352159468,0.0436129568106,0.0402906976744,0.04,0.04,0.04,0.0409547038328,0.0437421602787,0.0465296167247,0.0493170731707,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.0501908200103,0.0522537390407,0.0543166580712,0.0563795771016,0.058442496132,0.0595820895522,0.0578763326226,0.056170575693,0.0544648187633,0.0527590618337,0.0510533049041,0.0506298888431,0.0522766570605,0.0539234252779,0.0555701934953,0.0572169617126,0.05886372993,0.0595851455336,0.0582469053195,0.0569086651054,0.0555704248913,0.0542321846771,0.052893944463,0.0515557042489,0.0502174640348,0.0489365079365,0.0476666666667,0.0463968253968,0.045126984127,0.0438571428571,0.0425873015873,0.0413174603175,0.0400476190476,0.038932038835,0.0378224687933,0.0367128987517,0.0356033287101,0.0344937586685,0.0333841886269,0.0322746185853,0.0311650485437]),
			 k: new Float32Array([1.97412578616,2.04815992812,2.12194070081,2.19561545373,2.26929020665,2.33231146179,2.39443770764,2.45656395349,2.51184243697,2.56646428571,2.62108613445,2.67723972125,2.73633379791,2.79542787456,2.85452195122,2.90844489796,2.96068979592,3.01293469388,3.06517959184,3.117684,3.170484,3.223284,3.276084,3.32899948427,3.38304796287,3.43709644146,3.49114492006,3.54519339866,3.59736716418,3.64376375267,3.69016034115,3.73655692964,3.78295351812,3.82935010661,3.87651873199,3.92493371758,3.97334870317,4.02176368876,4.07017867435,4.11859365994,4.16573168284,4.21002743392,4.25432318501,4.2986189361,4.34291468719,4.38721043827,4.43150618936,4.47580194045,4.52075396825,4.56583333333,4.61091269841,4.65599206349,4.70107142857,4.74615079365,4.79123015873,4.83630952381,4.88114563107,4.92597226075,4.97079889043,5.01562552011,5.06045214979,5.10527877947,5.15010540915,5.19493203883]) } }

function tabulated_gold() { // 64 samples of n, k between 390.000000nm and 750.000000nm
	return { n: new Float32Array([1.46534591195,1.46893980234,1.46746630728,1.46387241689,1.4602785265,1.45693521595,1.45361295681,1.45029069767,1.43210784314,1.4125,1.39289215686,1.37331707317,1.35380487805,1.33429268293,1.3147804878,1.2624548105,1.19948104956,1.13650728863,1.0735335277,0.99512,0.89912,0.80312,0.70712,0.616374419804,0.577178958226,0.537983496648,0.49878803507,0.459592573491,0.424149253731,0.400268656716,0.376388059701,0.352507462687,0.328626865672,0.304746268657,0.284960889255,0.271786743516,0.258612597777,0.245438452038,0.232264306299,0.21909016056,0.207096018735,0.197728337237,0.188360655738,0.178992974239,0.16962529274,0.160257611241,0.150889929742,0.141522248244,0.138936507937,0.137666666667,0.136396825397,0.135126984127,0.133857142857,0.132587301587,0.131317460317,0.130047619048,0.131067961165,0.132177531207,0.133287101248,0.13439667129,0.135506241331,0.136615811373,0.137725381415,0.138834951456]),
			 k: new Float32Array([1.9431572327,1.94998562444,1.95352021563,1.95567654987,1.9578328841,1.95493521595,1.95161295681,1.94829069767,1.93930952381,1.92978571429,1.92026190476,1.90779442509,1.88967595819,1.87155749129,1.85343902439,1.84618250729,1.84245072886,1.83871895044,1.83498717201,1.85950057143,1.91618628571,1.972872,2.02955771429,2.08813666839,2.16528984012,2.24244301186,2.3195961836,2.39674935534,2.47205074627,2.541645629,2.61124051173,2.68083539446,2.75043027719,2.82002515991,2.88876245368,2.95611527378,3.02346809387,3.09082091396,3.15817373405,3.22552655414,3.28963131482,3.34650652392,3.40338173302,3.46025694212,3.51713215122,3.57400736032,3.63088256942,3.68775777852,3.74017777778,3.79173333333,3.84328888889,3.89484444444,3.9464,3.99795555556,4.04951111111,4.10106666667,4.14988349515,4.19859361997,4.2473037448,4.29601386963,4.34472399445,4.39343411928,4.44214424411,4.49085436893]) } }

function tabulated_aluminium() { // 64 samples of n, k between 390.000000nm and 750.000000nm
	return { n: new Float32Array([0.462656820239,0.477063589939,0.49147035964,0.505877129341,0.520283899042,0.536863995354,0.553617770035,0.570371544715,0.587125319396,0.603879094077,0.62318349197,0.643293349826,0.663403207682,0.683513065537,0.703622923393,0.723732781249,0.744505965266,0.765447319406,0.786388673546,0.807330027687,0.828271381827,0.849212735968,0.870154090108,0.893898555309,0.918157200645,0.942415845981,0.966674491317,0.990933136653,1.01519178199,1.03945042732,1.06370907266,1.09138697151,1.12111423502,1.15084149853,1.18056876204,1.21029602555,1.24002328906,1.26975055257,1.29947781608,1.32920507959,1.3589323431,1.39381619519,1.43030841584,1.46680063649,1.50329285714,1.53978507779,1.57667956002,1.61695777196,1.6572359839,1.69751419584,1.73779240778,1.77807061972,1.81834883167,1.86311853158,1.9097384138,1.95635829601,2.00297817823,2.04959806044,2.09621794266,2.14283782488,2.19588608404,2.25289106634,2.30989604863,2.36690103093]),
			 k: new Float32Array([4.71106886055,4.78218597873,4.8533030969,4.92442021508,4.99553733325,5.06654850949,5.13755121951,5.20855392954,5.27955663957,5.35055934959,5.41992588368,5.48877573064,5.55762557759,5.62647542455,5.6953252715,5.76417511845,5.83130436877,5.8979974039,5.96469043903,6.03138347416,6.09807650929,6.16476954442,6.23146257955,6.29752851972,6.36347943064,6.42943034156,6.49538125247,6.56133216339,6.6272830743,6.69323398522,6.75918489613,6.82328637585,6.88627938001,6.94927238416,7.01226538832,7.07525839248,7.13825139663,7.20124440079,7.26423740495,7.3272304091,7.39022341326,7.44970052157,7.50808100248,7.56646148338,7.62484196429,7.68322244519,7.74079221241,7.79154244686,7.84229268131,7.89304291575,7.9437931502,7.99454338465,8.0452936191,8.0897117784,8.13152156081,8.17333134323,8.21514112565,8.25695090807,8.29876069048,8.3405704729,8.36696634287,8.38387481277,8.40078328267,8.41769175258]) } }

function tabulated_chromium() { // 64 samples of n, k between 390.000000nm and 750.000000nm
	return { n: new Float32Array([1.965,1.99357142857,2.02214285714,2.05071428571,2.07928571429,2.11404761905,2.14896825397,2.18388888889,2.223,2.263,2.303,2.34671428571,2.39814285714,2.44957142857,2.501,2.55525714286,2.61011428571,2.66497142857,2.71982857143,2.76954285714,2.81297142857,2.8564,2.89982857143,2.94367346939,2.99265306122,3.04163265306,3.0906122449,3.13959183673,3.18121212121,3.18813852814,3.19506493506,3.20199134199,3.20891774892,3.21584415584,3.21673469388,3.20857142857,3.20040816327,3.19224489796,3.18408163265,3.17591836735,3.16700680272,3.15612244898,3.14523809524,3.1343537415,3.12346938776,3.11258503401,3.10170068027,3.09081632653,3.0853015873,3.08022222222,3.07514285714,3.07006349206,3.06498412698,3.0599047619,3.05482539683,3.05016483516,3.05346153846,3.05675824176,3.06005494505,3.06335164835,3.06664835165,3.06994505495,3.07324175824,3.07653846154]),
			 k: new Float32Array([2.790625,2.82276785714,2.85767857143,2.89339285714,2.92910714286,2.96404761905,2.99896825397,3.03388888889,3.06357142857,3.09214285714,3.12071428571,3.14928571429,3.17785714286,3.20642857143,3.235,3.25131428571,3.26502857143,3.27874285714,3.29245714286,3.30308571429,3.30994285714,3.3168,3.32365714286,3.33,3.33,3.33,3.33,3.33,3.32909090909,3.3238961039,3.3187012987,3.31350649351,3.30831168831,3.30311688312,3.3,3.3,3.3,3.3,3.3,3.3,3.30149659864,3.30693877551,3.31238095238,3.31782312925,3.32326530612,3.32870748299,3.33414965986,3.33959183673,3.34587301587,3.35222222222,3.35857142857,3.36492063492,3.37126984127,3.37761904762,3.38396825397,3.39016483516,3.39346153846,3.39675824176,3.40005494505,3.40335164835,3.40664835165,3.40994505495,3.41324175824,3.41653846154]) } }

function tabulated_iron() { // 64 samples of n, k between 390.000000nm and 750.000000nm
	return { n: new Float32Array([2.1875,2.23035714286,2.27044642857,2.30973214286,2.34901785714,2.39023809524,2.43150793651,2.47277777778,2.50592857143,2.53735714286,2.56878571429,2.59742857143,2.62028571429,2.64314285714,2.666,2.6832,2.6992,2.7152,2.7312,2.75234285714,2.77977142857,2.8072,2.83462857143,2.86137755102,2.87974489796,2.8981122449,2.91647959184,2.93484693878,2.9496969697,2.94796536797,2.94623376623,2.9445021645,2.94277056277,2.94103896104,2.93608163265,2.92628571429,2.91648979592,2.90669387755,2.89689795918,2.88710204082,2.88149659864,2.88693877551,2.89238095238,2.89782312925,2.90326530612,2.90870748299,2.91414965986,2.91959183673,2.91295238095,2.90533333333,2.89771428571,2.8900952381,2.88247619048,2.87485714286,2.86723809524,2.86005494505,2.86115384615,2.86225274725,2.86335164835,2.86445054945,2.86554945055,2.86664835165,2.86774725275,2.86884615385]),
			 k: new Float32Array([2.545,2.57357142857,2.599375,2.624375,2.649375,2.66857142857,2.68761904762,2.70666666667,2.72414285714,2.74128571429,2.75842857143,2.77464285714,2.78892857143,2.80321428571,2.8175,2.83131428571,2.84502857143,2.85874285714,2.87245714286,2.88308571429,2.88994285714,2.8968,2.90365714286,2.91030612245,2.9143877551,2.91846938776,2.92255102041,2.92663265306,2.93181818182,2.94220779221,2.9525974026,2.96298701299,2.97337662338,2.98376623377,2.99391836735,3.00371428571,3.01351020408,3.02330612245,3.03310204082,3.04289795918,3.0518707483,3.05867346939,3.06547619048,3.07227891156,3.07908163265,3.08588435374,3.09268707483,3.09948979592,3.11057142857,3.122,3.13342857143,3.14485714286,3.15628571429,3.16771428571,3.17914285714,3.19049450549,3.20038461538,3.21027472527,3.22016483516,3.23005494505,3.23994505495,3.24983516484,3.25972527473,3.26961538462]) } }

function tabulated_molybdenum() { // 64 samples of n, k between 390.000000nm and 750.000000nm
	return { n: new Float32Array([3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.736186,3.7412794383,3.75098122553,3.76068301277,3.7703848,3.78008658723,3.78978837447,3.7994901617,3.80919194894,3.81477207273,3.81073498182,3.80669789091,3.8026608,3.79862370909,3.79458661818,3.79054952727]),
			 k: new Float32Array([3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.591222,3.58806158298,3.58204174103,3.57602189909,3.57000205714,3.5639822152,3.55796237325,3.55194253131,3.54592268936,3.53812189403,3.52616554078,3.51420918753,3.50225283429,3.49029648104,3.47834012779,3.46638377455]) } }

function tabulated_nickel() { // 64 samples of n, k between 390.000000nm and 750.000000nm
	return { n: new Float32Array([2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15,2.15638297872,2.16854103343,2.18069908815,2.19285714286,2.20501519757,2.21717325228,2.22933130699,2.2414893617,2.25467532468,2.27025974026,2.28584415584,2.30142857143,2.31701298701,2.3325974026,2.34818181818]),
			 k: new Float32Array([3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.88,3.89468085106,3.9226443769,3.95060790274,3.97857142857,4.00653495441,4.03449848024,4.06246200608,4.09042553191,4.11716883117,4.14106493506,4.16496103896,4.18885714286,4.21275324675,4.23664935065,4.26054545455]) } }

function tabulated_lead() { // 64 samples of n, k between 390.000000nm and 750.000000nm
	return { n: new Float32Array([1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.88,1.87106382979,1.85404255319,1.8370212766,1.82,1.8029787234,1.78595744681,1.76893617021,1.75191489362,1.73407792208,1.71433766234,1.6945974026,1.67485714286,1.65511688312,1.63537662338,1.61563636364]),
			 k: new Float32Array([3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49,3.49574468085,3.50668693009,3.51762917933,3.52857142857,3.53951367781,3.55045592705,3.56139817629,3.57234042553,3.58841558442,3.61646753247,3.64451948052,3.67257142857,3.70062337662,3.72867532468,3.75672727273]) } }

function tabulated_palladium() { // 64 samples of n, k between 390.000000nm and 750.000000nm
	return { n: new Float32Array([1.2825,1.29678571429,1.30830357143,1.31901785714,1.32973214286,1.34238095238,1.35507936508,1.36777777778,1.37942857143,1.39085714286,1.40228571429,1.41464285714,1.42892857143,1.44321428571,1.4575,1.47131428571,1.48502857143,1.49874285714,1.51245714286,1.52514285714,1.53657142857,1.548,1.55942857143,1.57107142857,1.58535714286,1.59964285714,1.61392857143,1.62821428571,1.64121212121,1.64813852814,1.65506493506,1.66199134199,1.66891774892,1.67584415584,1.68457142857,1.696,1.70742857143,1.71885714286,1.73028571429,1.74171428571,1.7518707483,1.75867346939,1.76547619048,1.77227891156,1.77908163265,1.78588435374,1.79268707483,1.79948979592,1.80704761905,1.81466666667,1.82228571429,1.8299047619,1.83752380952,1.84514285714,1.85276190476,1.86049450549,1.87038461538,1.88027472527,1.89016483516,1.90005494505,1.90994505495,1.91983516484,1.92972527473,1.93961538462]),
			 k: new Float32Array([2.88625,2.92196428571,2.95767857143,2.99339285714,3.02910714286,3.06404761905,3.09896825397,3.13388888889,3.16828571429,3.20257142857,3.23685714286,3.27207142857,3.30921428571,3.34635714286,3.3835,3.41828571429,3.45257142857,3.48685714286,3.52114285714,3.5544,3.5864,3.6184,3.6504,3.68244897959,3.71510204082,3.74775510204,3.78040816327,3.81306122449,3.84545454545,3.87662337662,3.90779220779,3.93896103896,3.97012987013,4.0012987013,4.03240816327,4.06342857143,4.09444897959,4.12546938776,4.15648979592,4.18751020408,4.21785714286,4.24642857143,4.275,4.30357142857,4.33214285714,4.36071428571,4.38928571429,4.41785714286,4.44701587302,4.47622222222,4.50542857143,4.53463492063,4.56384126984,4.59304761905,4.62225396825,4.65131868132,4.67769230769,4.70406593407,4.73043956044,4.75681318681,4.78318681319,4.80956043956,4.83593406593,4.86230769231]) } }

function tabulated_platinum() { // 64 samples of n, k between 390.000000nm and 750.000000nm
	return { n: new Float32Array([1.17558457425,1.0999656884,1.02434680255,0.948727916706,0.873109030858,0.833677079586,0.797144343472,0.760611607357,0.724078871242,0.687546135127,0.651013399012,0.622189854402,0.607626886041,0.593063917679,0.578500949318,0.563937980957,0.549375012595,0.534812044234,0.520249075873,0.510100420763,0.505112449965,0.500124479167,0.495136508369,0.490148537571,0.485160566772,0.480172595974,0.475184625176,0.470196654378,0.46520868358,0.464082890327,0.463817418284,0.463551946242,0.463286474199,0.463021002157,0.462755530114,0.462490058072,0.46222458603,0.461959113987,0.461693641945,0.461428169902,0.46116269786,0.463081272745,0.465675155827,0.468269038908,0.47086292199,0.473456805072,0.476050688153,0.478644571235,0.481238454317,0.483832337398,0.48642622048,0.489020103562,0.491613986643,0.494207869725,0.496801752807,0.499395635889,0.502542677846,0.507217474593,0.511892271341,0.516567068089,0.521241864837,0.525916661585,0.530591458333,0.535266255081]),
			 k: new Float32Array([2.98961740744,3.04442177705,3.09922614666,3.15403051627,3.20883488588,3.2900083731,3.37329449423,3.45658061537,3.5398667365,3.62315285764,3.70643897877,3.78878592341,3.86939556552,3.95000520762,4.03061484973,4.11122449183,4.19183413394,4.27244377604,4.35305341815,4.43113711346,4.50626777548,4.5813984375,4.65652909952,4.73165976154,4.80679042356,4.88192108558,4.9570517476,5.03218240963,5.10731307165,5.17898863676,5.2498945601,5.32080048345,5.39170640679,5.46261233014,5.53351825348,5.60442417683,5.67533010017,5.74623602352,5.81714194686,5.88804787021,5.95895379355,6.02752851787,6.09538243451,6.16323635114,6.23109026778,6.29894418441,6.36679810105,6.43465201768,6.50250593431,6.57035985095,6.63821376758,6.70606768422,6.77392160085,6.84177551749,6.90962943412,6.97748335075,7.04473222307,7.11031003956,7.17588785605,7.24146567255,7.30704348904,7.37262130553,7.43819912202,7.50377693852]) } }

function tabulated_silicon() { // 64 samples of n, k between 390.000000nm and 750.000000nm
	return { n: new Float32Array([5.96280645161,5.73607834101,5.53030277186,5.38190191898,5.2335010661,5.12510965795,5.02007947686,4.9270130719,4.8493286648,4.7716442577,4.7079825784,4.64874912892,4.58951567944,4.54248668281,4.49696610169,4.45144552058,4.41292180451,4.37623007519,4.33953834586,4.30644927536,4.27746376812,4.24847826087,4.21949275362,4.19525650794,4.17189142857,4.14852634921,4.12516126984,4.10585539359,4.08696326531,4.06807113703,4.04917900875,4.03234968017,4.01678464819,4.0012196162,3.98565458422,3.97008955224,3.95765084746,3.94544745763,3.9332440678,3.92104067797,3.90883728814,3.89806266433,3.8877208589,3.87737905346,3.86703724803,3.85669544259,3.84649822904,3.83846989374,3.83044155844,3.82241322314,3.81438488784,3.80635655254,3.79832821724,3.79159223986,3.78538412698,3.77917601411,3.77296790123,3.76675978836,3.76055167549,3.75434356261,3.74903571429,3.74427380952,3.73951190476,3.73475]),
			 k: new Float32Array([0.581008064516,0.469026497696,0.373539445629,0.323219616205,0.27289978678,0.244498993964,0.217939637827,0.196464052288,0.181524743231,0.166585434174,0.154261324042,0.142763066202,0.131264808362,0.118506860371,0.105593220339,0.0926795803067,0.0859481203008,0.0808353383459,0.075722556391,0.0713222912353,0.0677336093858,0.0641449275362,0.0605562456867,0.0574247619048,0.0543771428571,0.0513295238095,0.0482819047619,0.0446134110787,0.0408816326531,0.0371498542274,0.0334180758017,0.0317356076759,0.0313091684435,0.0308827292111,0.0304562899787,0.0300298507463,0.0285588377724,0.0270092009685,0.0254595641646,0.0239099273608,0.0223602905569,0.0211928133216,0.0201411042945,0.0190893952673,0.0180376862401,0.016985977213,0.0159704840614,0.0154982290437,0.015025974026,0.0145537190083,0.0140814639906,0.0136092089728,0.0131369539551,0.0126994708995,0.0122761904762,0.0118529100529,0.0114296296296,0.0110063492063,0.0105830687831,0.0101597883598,0.00984398496241,0.00959335839599,0.00934273182957,0.00909210526316]) } }

function tabulated_titanium() { // 64 samples of n, k between 390.000000nm and 750.000000nm
	return { n: new Float32Array([2.040625,2.07276785714,2.09660714286,2.11803571429,2.13946428571,2.16166666667,2.18388888889,2.20611111111,2.22414285714,2.24128571429,2.25842857143,2.27464285714,2.28892857143,2.30321428571,2.3175,2.32754285714,2.33668571429,2.34582857143,2.35497142857,2.36822857143,2.38651428571,2.4048,2.42308571429,2.44153061224,2.46193877551,2.48234693878,2.50275510204,2.52316326531,2.54181818182,2.55220779221,2.5625974026,2.57298701299,2.58337662338,2.59376623377,2.60457142857,2.616,2.62742857143,2.63885714286,2.65028571429,2.66171428571,2.67336734694,2.6856122449,2.69785714286,2.71010204082,2.72234693878,2.73459183673,2.74683673469,2.75908163265,2.77174603175,2.78444444444,2.79714285714,2.80984126984,2.82253968254,2.83523809524,2.84793650794,2.86076923077,2.87615384615,2.89153846154,2.90692307692,2.92230769231,2.93769230769,2.95307692308,2.96846153846,2.98384615385]),
			 k: new Float32Array([2.94125,2.94839285714,2.95830357143,2.96901785714,2.97973214286,2.98928571429,2.99880952381,3.00833333333,3.01707142857,3.02564285714,3.03421428571,3.04557142857,3.06271428571,3.07985714286,3.097,3.11697142857,3.13754285714,3.15811428571,3.17868571429,3.20131428571,3.22645714286,3.2516,3.27674285714,3.30198979592,3.32852040816,3.35505102041,3.38158163265,3.4081122449,3.43454545455,3.46051948052,3.48649350649,3.51246753247,3.53844155844,3.56441558442,3.58914285714,3.612,3.63485714286,3.65771428571,3.68057142857,3.70342857143,3.72448979592,3.74081632653,3.75714285714,3.77346938776,3.78979591837,3.80612244898,3.82244897959,3.8387755102,3.8540952381,3.86933333333,3.88457142857,3.89980952381,3.91504761905,3.93028571429,3.94552380952,3.96027472527,3.96576923077,3.97126373626,3.97675824176,3.98225274725,3.98774725275,3.99324175824,3.99873626374,4.00423076923]) } }

function tabulated_tungsten() { // 64 samples of n, k between 390.000000nm and 750.000000nm
	return { n: new Float32Array
			 k: new Float32Array} }

function tabulated_zinc() { // 64 samples of n, k between 390.000000nm and 750.000000nm
	return { n: new Float32Array([0.56474643138,0.574111166233,0.583475901086,0.592840635939,0.602205370792,0.613672079149,0.625307192858,0.636942306566,0.648577420275,0.660212533983,0.671847647692,0.684132110458,0.697617748697,0.711103386936,0.724589025175,0.738074663414,0.751560301652,0.765045939891,0.77853157813,0.792799135142,0.807980817571,0.8231625,0.838344182429,0.853525864858,0.868707547287,0.883889229716,0.899070912145,0.914252594574,0.929434277003,0.946000033599,0.962874100299,0.979748166999,0.996622233698,1.0134963004,1.0303703671,1.0472444338,1.0641185005,1.0809925672,1.0978666339,1.1147407006,1.1316147673,1.14984840673,1.1685024266,1.18715644648,1.20581046635,1.22446448622,1.2431185061,1.26177252597,1.28042654584,1.29908056572,1.31773458559,1.33638860547,1.35504262534,1.37369664521,1.39235066509,1.41100468496,1.43015697663,1.45068543191,1.4712138872,1.49174234248,1.51227079776,1.53279925305,1.55332770833,1.57385616362]),
			 k: new Float32Array([3.38934549401,3.45027918144,3.51121286887,3.5721465563,3.63308024373,3.69157304494,3.74987028787,3.80816753081,3.86646477374,3.92476201668,3.98305925961,4.04058895958,4.09669884726,4.15280873493,4.2089186226,4.26502851027,4.32113839795,4.37724828562,4.43335817329,4.4885272477,4.54259643635,4.596665625,4.65073481365,4.7048040023,4.75887319095,4.8129423796,4.86701156826,4.92108075691,4.97514994556,5.02751278787,5.07949553219,5.13147827651,5.18346102082,5.23544376514,5.28742650946,5.33940925377,5.39139199809,5.44337474241,5.49535748673,5.54734023104,5.59932297536,5.64952510889,5.69917667683,5.74882824477,5.79847981272,5.84813138066,5.89778294861,5.94743451655,5.99708608449,6.04673765244,6.09638922038,6.14604078833,6.19569235627,6.24534392422,6.29499549216,6.3446470601,6.3935460747,6.44036663219,6.48718718968,6.53400774717,6.58082830466,6.62764886215,6.67446941964,6.72128997713]) } }


function TabulatedMetal(name, desc, nk)
{
	Metal.call(this, name, desc);
	this.ior_tex  = new GLU.Texture(64, 1, 1, true, true, true, nk.n);
	this.k_tex    = new GLU.Texture(64, 1, 1, true, true, true, nk.k);
}

TabulatedMetal.prototype = Object.create(Metal.prototype);

TabulatedMetal.prototype.ior = function()
{
	// Defines GLSL functions which take wavelength (in nanometres) and return ior and k
	var Nsample = 64;
	var delta = (Nsample-1.0)/(750.0-390.0);
	return `
				float IOR_METAL(float wavelength_nm)
				{
					float u = (wavelength_nm - 390.0) * ${delta};
					return texture2D(iorTex, vec2(u, 0.5)).r;
				}                                                       
				float K_METAL(float wavelength_nm)                                      
				{
					float u = (wavelength_nm - 390.0) * ${delta};
					return texture2D(kTex, vec2(u, 0.5)).r;
				}
	`;
}

TabulatedMetal.prototype.syncShader = function(shader)
{
	this.ior_tex.bind(5);
    shader.uniformTexture("iorTex", this.ior_tex);

    this.k_tex.bind(6);
    shader.uniformTexture("k_tex", this.k_tex);

	Metal.prototype.syncShader.call(this, shader);
}

// set up gui and callbacks for this material
TabulatedMetal.prototype.initGui = function(parentFolder)
{

}

TabulatedMetal.prototype.eraseGui = function(parentFolder)
{

}

TabulatedMetal.prototype.initGui  = function(parentFolder) { Metal.prototype.initGui.call(this, parentFolder) }
TabulatedMetal.prototype.eraseGui = function(parentFolder) { Metal.prototype.eraseGui.call(this, parentFolder) }



////////////////////////////////////////////////////////
// Dielectrics
////////////////////////////////////////////////////////

function Dielectric(name, desc)
{
	Material.call(this, name, desc);
	this.roughness = 0.001;
	this.absorptionScale = 1.0;
	this.absorptionColor  = [0.0, 0.0, 0.0];
	this.absorptionColorF = [0.0, 0.0, 0.0];
	this.absorption       = [0.0, 0.0, 0.0];
}

Dielectric.prototype = Object.create(Material.prototype);

Dielectric.prototype.sample = function()
{
	return `
			float SAMPLE(inout vec3 X, inout vec3 D, vec3 N, float wavelength_nm, inout vec4 rnd)
			{                                                          
				return sampleDielectric(X, D, N, IOR_DIELE(wavelength_nm), rnd);       
			}
	`;
}

Dielectric.prototype.syncShader = function(shader)
{
	shader.uniformF("roughnessDiele", this.roughness);

	var sceneScale = 1.0;
	var sceneObj = snelly.getScene();
	if (typeof sceneObj.getScale !== "undefined") 
	{
		// make absorption scale relative to scene scale, if one was defined
		 sceneScale = sceneObj.getScale();
	}
	this.absorption[0] = sceneScale * this.absorptionScale * Math.max(0.0, 1.0 - this.absorptionColorF[0]);
	this.absorption[1] = sceneScale * this.absorptionScale * Math.max(0.0, 1.0 - this.absorptionColorF[1]);
	this.absorption[2] = sceneScale * this.absorptionScale * Math.max(0.0, 1.0 - this.absorptionColorF[2]);
	shader.uniform3Fv("absorptionDiele", this.absorption);
}

Dielectric.prototype.initGui  = function(parentFolder) 
{ 
	this.roughnessItem = parentFolder.add(this, 'roughness', 0.0, 1.0);
	this.roughnessItem.onChange( function(value) { snelly.controls.enabled = false; snelly.reset(true); } );
	this.roughnessItem.onFinishChange( function(value) { snelly.controls.enabled = true; } );

	this.absorptionColorItem = parentFolder.addColor(this, 'absorptionColor');
	var ME = this;
	this.absorptionColorItem.onChange( function(value) {
							if (typeof value==='string' || value instanceof String)
							{
								var color = hexToRgb(value);
								ME.absorptionColorF[0] = color.r / 255.0;
								ME.absorptionColorF[1] = color.g / 255.0;
								ME.absorptionColorF[2] = color.b / 255.0;
							}
							else
							{
								ME.absorptionColorF[0] = value[0] / 255.0;
								ME.absorptionColorF[1] = value[1] / 255.0;
								ME.absorptionColorF[2] = value[2] / 255.0;
							}
							snelly.reset(true);
						} );

	this.absorptionScaleItem = parentFolder.add(this, 'absorptionScale', 0.0, 10.0);
	this.absorptionScaleItem.onChange( function(value) { snelly.controls.enabled = false; snelly.reset(true); } );
	this.absorptionScaleItem.onFinishChange( function(value) { snelly.controls.enabled = true; } );
}

Dielectric.prototype.eraseGui = function(parentFolder) 
{ 
	parentFolder.remove(this.roughnessItem);
	parentFolder.remove(this.absorptionColorItem);
	parentFolder.remove(this.absorptionScaleItem);
}


//
// Simplest (but unphysical) model with no wavelength dependence
//
function ConstantDielectric(name, desc, iorVal) 
{
	Dielectric.call(this, name, desc);
	this.iorVal = iorVal;
}

ConstantDielectric.prototype = Object.create(Dielectric.prototype);

ConstantDielectric.prototype.ior = function()
{
	return `
				uniform float _iorVal;
				float IOR_DIELE(float wavelength_nm)  
				{                     
					return _iorVal;   
				}
	`;
}

ConstantDielectric.prototype.syncShader = function(shader)
{
	shader.uniformF("_iorVal", this.iorVal);
	Dielectric.prototype.syncShader.call(this, shader);
}

// set up gui and callbacks for this material
ConstantDielectric.prototype.initGui = function(parentFolder)
{
	this.iorItem = parentFolder.add(this, 'iorVal', 0.0, 5.0);
	this.iorItem.onChange( function(value) { snelly.controls.enabled = false; snelly.reset(true); } );
	this.iorItem.onFinishChange( function(value) { snelly.controls.enabled = true; } );

	Dielectric.prototype.initGui.call(this, parentFolder)
}

ConstantDielectric.prototype.eraseGui = function(parentFolder)
{
	parentFolder.remove(this.iorItem);
	Material.prototype.eraseGui.call(this, parentFolder)
}


// The standard Sellmeier model for dielectrics (model 1 at refractiveindex.info)
function SellmeierDielectric(name, desc, coeffs) 
{
	Dielectric.call(this, name, desc);
	this.coeffs = coeffs;
}

SellmeierDielectric.prototype = Object.create(Dielectric.prototype);

SellmeierDielectric.prototype.ior = function()
{
	var numTerms = (this.coeffs.length - 1)/2;
	var IOR_FORMULA = `1.0 + _C1 `;
	for (var t=1; t<=numTerms; ++t)
	{
		IOR_FORMULA += `+ _C${2*t}*l2/(l2 - _C${2*t+1}*_C${2*t+1})`;
	}

	// Defines a GLSL function which takes wavelength (in micrometres) and returns ior
	var uniforms = '';
	for (var n=1; n<=this.coeffs.length; ++n)
	{
		uniforms += `uniform float _C${n};\n`
	}
	var code = `${uniforms}    
	float IOR_DIELE(float wavelength_nm) 
	{                                                                                            
		float wavelength_um = 1.0e-3*wavelength_nm;                                                                      
		float l2 = wavelength_um*wavelength_um;                                                                               
		float n2 = ${IOR_FORMULA}; 
		return max(sqrt(abs(n2)), 1.0e-3);                                                                     
	}`;

	return code;
}

SellmeierDielectric.prototype.syncShader = function(shader)
{
	for (var n=1; n<=this.coeffs.length; ++n)
	{
		shader.uniformF(`_C${n}`, this.coeffs[n-1]);
	}
	Dielectric.prototype.syncShader.call(this, shader);
}

// set up gui and callbacks for this material
SellmeierDielectric.prototype.initGui  = function(parentFolder) { Dielectric.prototype.initGui.call(this, parentFolder) }
SellmeierDielectric.prototype.eraseGui = function(parentFolder) { Dielectric.prototype.eraseGui.call(this, parentFolder) }


// The standard Sellmeier model for dielectrics (model 2 at refractiveindex.info)
// coeffs array must have an odd number of elements (the constant, plus a pair per 'pole' term)
function Sellmeier2Dielectric(name, desc, coeffs) 
{
	Dielectric.call(this, name, desc);
	this.coeffs = coeffs;
}

Sellmeier2Dielectric.prototype = Object.create(Dielectric.prototype);

Sellmeier2Dielectric.prototype.ior = function()
{
	var numTerms = (this.coeffs.length - 1)/2;
	var IOR_FORMULA = `1.0 + _C1 `;
	for (var t=1; t<=numTerms; ++t)
	{
		IOR_FORMULA += `+ _C${2*t}*l2/(l2 - _C${2*t+1})`;
	}

	// Defines a GLSL function which takes wavelength (in nanometres) and returns ior
	var uniforms = '';
	for (var n=1; n<=this.coeffs.length; ++n)
	{
		uniforms += `uniform float _C${n};\n`
	}
	var code = `${uniforms}    
	float IOR_DIELE(float wavelength_nm) 
	{                                                                                            
		float wavelength_um = 1.0e-3*wavelength_nm;                                                                      
		float l2 = wavelength_um*wavelength_um;                                                                               
		float n2 = ${IOR_FORMULA}; 
		return max(sqrt(abs(n2)), 1.0e-3);                                                                     
	}`;

	return code;
}

Sellmeier2Dielectric.prototype.syncShader = function(shader)
{
	for (var n=1; n<=this.coeffs.length; ++n)
	{
		shader.uniformF(`_C${n}`, this.coeffs[n-1]);
	}
	Dielectric.prototype.syncShader.call(this, shader);
}

// set up gui and callbacks for this material
Sellmeier2Dielectric.prototype.initGui  = function(parentFolder) { Dielectric.prototype.initGui.call(this, parentFolder) }
Sellmeier2Dielectric.prototype.eraseGui = function(parentFolder) { Dielectric.prototype.eraseGui.call(this, parentFolder) }



// Model 4 at Polyanskiy's refractiveindex.info:
function PolyanskiyDielectric(name, desc, coeffs) 
{
	Dielectric.call(this, name, desc);
	this.C1 = coeffs[0];
	this.C2 = coeffs[1];
	this.C3 = coeffs[2];
	this.C4 = coeffs[3];
	this.C5 = coeffs[4];
}

PolyanskiyDielectric.prototype = Object.create(Dielectric.prototype);

PolyanskiyDielectric.prototype.ior = function()
{
	var IOR_FORMULA = ' _C1 + _C2*pow(l, _C3)/(l*l - pow(_C4, _C5))'; 

	// Defines a GLSL function which takes wavelength (in nanometres) and returns ior
	var code = `
	uniform float _C1;
	uniform float _C2;
	uniform float _C3;
	uniform float _C4;
	uniform float _C5;
	float IOR_DIELE(float wavelength_nm) 
	{                                                                                            
		float wavelength_um = 1.0e-3*wavelength_nm;                                                                      
		float l = wavelength_um;                                                                               
		float n2 = ${IOR_FORMULA}; 
		return max(sqrt(abs(n2)), 1.0e-3);                                                                     
	}`;

	return code;
}

PolyanskiyDielectric.prototype.syncShader = function(shader)
{
	shader.uniformF('_C1', this.C1);
	shader.uniformF('_C2', this.C2);
	shader.uniformF('_C3', this.C3);
	shader.uniformF('_C4', this.C4);
	shader.uniformF('_C5', this.C5);
	Dielectric.prototype.syncShader.call(this, shader);
}

// set up gui and callbacks for this material
PolyanskiyDielectric.prototype.initGui  = function(parentFolder) { Dielectric.prototype.initGui.call(this, parentFolder) }
PolyanskiyDielectric.prototype.eraseGui = function(parentFolder) { Dielectric.prototype.eraseGui.call(this, parentFolder) }


// Cauchy model for dielectrics (model 5 at refractiveindex.info)
function CauchyDielectric(name, desc, coeffs) 
{
	Dielectric.call(this, name, desc);
	this.coeffs = coeffs;
}

CauchyDielectric.prototype = Object.create(Dielectric.prototype);

CauchyDielectric.prototype.ior = function()
{
	var numTerms = (this.coeffs.length - 1)/2;
	var IOR_FORMULA = `_C1`;
	for (var t=1; t<=numTerms; ++t)
	{
		IOR_FORMULA += ` + _C${2*t}*pow(l, _C${2*t+1})`;
	}

	// Defines a GLSL function which takes wavelength (in nanometres) and returns ior
	var uniforms = '';
	for (var n=1; n<=this.coeffs.length; ++n)
	{
		uniforms += `uniform float _C${n};\n`;
	}
	var code = `${uniforms}    
	float IOR_DIELE(float wavelength_nm) 
	{                                                                                            
		float wavelength_um = 1.0e-3*wavelength_nm;                                                                      
		float l = wavelength_um;                                                                               
		float n = ${IOR_FORMULA}; 
		return max(n, 1.0e-3);                                                                     
	}`;

	return code;
}

CauchyDielectric.prototype.syncShader = function(shader)
{
	for (var n=1; n<=this.coeffs.length; ++n)
	{
		shader.uniformF(`_C${n}`, this.coeffs[n-1]);
	}
	Dielectric.prototype.syncShader.call(this, shader);
}

// set up gui and callbacks for this material
CauchyDielectric.prototype.initGui  = function(parentFolder) { Dielectric.prototype.initGui.call(this, parentFolder) }
CauchyDielectric.prototype.eraseGui = function(parentFolder) { Dielectric.prototype.eraseGui.call(this, parentFolder) }



////////////////////////////////////////////////////
// Material manager
////////////////////////////////////////////////////

var Materials = function()
{
	this.dielectrics = {}
	this.metals = {}
	this.dielectricObj = null;
	this.metalObj = null;
	{
		// Dielectrics
		this.addDielectric( new ConstantDielectric("Constant IOR dielectric", "", 1.5) ); 
		this.addDielectric( new SellmeierDielectric("Glass (BK7)", "",       [0.0, 1.03961212, 0.00600069867, 0.231792344, 0.0200179144, 1.01046945,  103.560653]) );
		this.addDielectric( new Sellmeier2Dielectric("Glass (K7)", "",       [0.0, 1.1273555,  0.00720341707, 0.124412303, 0.0269835916, 0.827100531, 100.384588]) );
		this.addDielectric( new Sellmeier2Dielectric("Glass (F5)", "",       [0.0, 1.3104463,  0.00958633048, 0.19603426,  0.0457627627, 0.96612977,  115.011883]) );
		this.addDielectric( new Sellmeier2Dielectric("Glass (LAFN7)", "",    [0.0, 1.66842615, 0.0103159999,  0.298512803, 0.0469216348, 1.0774376,   82.5078509]) );
		this.addDielectric( new Sellmeier2Dielectric("Glass (LASF35)", "",   [0.0, 2.45505861, 0.0135670404,  0.453006077, 0.054580302,  2.3851308,   167.904715]) );
		this.addDielectric( new Sellmeier2Dielectric("Glass (N-LAK33A)", "", [0.0, 1.44116999, 0.00680933877, 0.571749501, 0.0222291824, 1.16605226,  80.9379555]) );
		this.addDielectric( new SellmeierDielectric("Glass (N-FK51A)", "",   [0.0, 0.97124781, 0.00472301995, 0.216901417, 0.0153575612, 0.90465166,  168.68133]) );
		this.addDielectric( new Sellmeier2Dielectric("Glass (SF4)", "",      [0.0, 1.61957826, 0.0125502104,  0.339493189, 0.0544559822, 1.02566931,  117.652222]) );
		this.addDielectric( new Sellmeier2Dielectric("Glass (SF67)", "",     [0.0, 1.97464225, 0.0145772324,  0.467095921, 0.0669790359, 2.43154209,  157.444895]) );
		this.addDielectric( new Sellmeier2Dielectric("Water", "",            [0.0,        5.67252e-1, 5.08555046e-3, 1.736581e-1, 1.8149386e-2, 2.12153e-2, 2.61726e-2, 1.1384932e-1, 1.073888e1]) );
		this.addDielectric( new Sellmeier2Dielectric("Ethanol", "",          [0.0,        0.83189,    0.00930,       -0.15582,    -49.45200]) );
		this.addDielectric( new Sellmeier2Dielectric("Polycarbonate", "",    [0.0,        0.83189,    0.00930,       -0.15582,    -49.45200]) );
		this.addDielectric( new CauchyDielectric("Glycerol", "",             [1.45797, 0.00598, -2, -0.00036, -4]) );
		this.addDielectric( new CauchyDielectric("Liquid Crystal (E7)", "",  [1.4990,  0.0072,  -2,  0.0003,  -4]) );
		this.addDielectric( new SellmeierDielectric("Diamond", "",           [0.0,        0.3306,     0.175,         4.3356,      0.1060]) );
		this.addDielectric( new SellmeierDielectric("Quartz", "",            [0.0, 0.6961663, 0.0684043, 0.4079426, 0.1162414, 0.8974794, 9.896161]) );
		this.addDielectric( new SellmeierDielectric("Fused Silica", "",      [0.0,        0.6961663,  0.0684043,     0.4079426,  0.1162414, 0.8974794, 9.896161]) );
		this.addDielectric( new SellmeierDielectric("Sapphire", "",          [0.0,        1.5039759,  0.0740288,     0.55069141, 0.1216529, 6.5927379, 20.072248]) );
		this.addDielectric( new SellmeierDielectric("Sodium Chloride", "",   [0.00055,    0.19800,    0.050,         0.48398,     0.100,        0.38696,   0.128]) );
		this.addDielectric( new PolyanskiyDielectric("Proustite", "",        [7.483, 0.474, 0.0, 0.09, 1.0]) );
		this.addDielectric( new PolyanskiyDielectric("Rutile (Titanium Dioxide)", "", [5.913, 0.2441, 0.0, 0.0803, 1.0]) );
		this.addDielectric( new PolyanskiyDielectric("Silver Chloride", "", [4.00804, 0.079086, 0.0, 0.04584, 1.0]) );

		// Metals
		this.addMetal( new TabulatedMetal("Copper",     "", tabulated_copper()    ));
		this.addMetal( new TabulatedMetal("Silver",     "", tabulated_silver()    ));
		this.addMetal( new TabulatedMetal("Gold",       "", tabulated_gold()      ));
		this.addMetal( new TabulatedMetal("Aluminium",  "", tabulated_aluminium() ));
		this.addMetal( new TabulatedMetal("Chromium",   "", tabulated_chromium()  ));
		this.addMetal( new TabulatedMetal("Iron",       "", tabulated_iron()      ));
		this.addMetal( new TabulatedMetal("Molybdenum", "", tabulated_molybdenum()));
		this.addMetal( new TabulatedMetal("Nickel",     "", tabulated_nickel()    ));
		this.addMetal( new TabulatedMetal("Lead",       "", tabulated_lead()      ));
		this.addMetal( new TabulatedMetal("Palladium",  "", tabulated_palladium() ));
		this.addMetal( new TabulatedMetal("Platinum",   "", tabulated_platinum()  ));
		this.addMetal( new TabulatedMetal("Silicon",    "", tabulated_silicon()   ));
		this.addMetal( new TabulatedMetal("Titanium",   "", tabulated_titanium()  ));
		this.addMetal( new TabulatedMetal("Tungsten",   "", tabulated_tungsten()  ));
		this.addMetal( new TabulatedMetal("Zinc",       "", tabulated_zinc()      ));
	}

	// Load the initial material
	this.loadDielectric("Glass (LASF35)");
	this.loadMetal("Copper");
}

Materials.prototype.addDielectric = function(materialObj)
{
	this.dielectrics[materialObj.getName()] = materialObj;
}

Materials.prototype.getDielectrics = function()
{
	return this.dielectrics;
}

Materials.prototype.addMetal = function(materialObj)
{
	this.metals[materialObj.getName()] = materialObj;
}

Materials.prototype.getMetals = function()
{
	return this.metals;
}

Materials.prototype.loadDielectric = function(dielectricName)
{
	this.dielectricObj = this.dielectrics[dielectricName];
}

Materials.prototype.loadMetal = function(metalName)
{
	this.metalObj = this.metals[metalName];
}

Materials.prototype.getLoadedDielectric = function()
{
	return this.dielectricObj;
}

Materials.prototype.getLoadedMetal = function()
{
	return this.metalObj;
}


